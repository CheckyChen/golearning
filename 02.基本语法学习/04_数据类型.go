package _2_基本语法学习

import (
	"bytes"
	"fmt"
	"math"
	"strings"
	"unicode/utf8"
)

// Go 语言中有丰富的数据类型，除了基本的整型、浮点型、布尔型、字符串外，还有切片、结构体、函数、map、通道（channel）等。
// Go 语言的基本类型和其他语言大同小异，切片类型有着指针的便利性，但比指针更为安全，很多高级语言都配有切片进行安全和高效率的内存操作。

// 1、整型
// 1.1、两大类
//	  ·按长度分为：int8，int16,int32,int64
// 	  ·还有对应的无符号整型：uint8，uint16，uint32，uint64
//其中，uint8就是byte型，int16对应的C语言中的short型，int64对应C语言中的long型

// 2、浮点类型
// 2.1、两种
//    ·float32 的浮点数的最大值范围约为 3.4e38,可以使用常量定义：math.MaxFloat32
// 	  ·float64 的浮点数的最大值范围约为 1.8e308,可以使用常量定义：math.MaxFloat64

func printFloat() {
	//fmt.Println("%s\n", math.Pi)
	// 使用fmt.Printf() 打印浮点型
	fmt.Printf("%f\n", math.Pi)
	fmt.Printf("%.2f\n", math.Pi)
}

// 3、布尔类型
// 布尔型数据在 Go 语言中以 bool 类型进行声明，布尔型数据只有 true（真）和 false（假）两个值。

func boolFunc() bool {
	flag := true
	return flag
}

// 4、字符串类型：字符串在 Go 语言中以原生数据类型出现，
// 使用字符串就像使用其他原生数据类型（int、bool、float32、float64 等）一样。

func strFunc() {
	str := "hello , this is checky chen"
	ch := "中国"
	fmt.Println(str+"\n", ch)
}

// 4.1、字符串转义
//	① \r 回车符
//	② \n 换行符
//  ③ \t 制表符
//	④ \' 单引号
//  ⑤ \" 双引号
//  ⑥ \\ 反斜杠

func getPath() string {
	path := "path = \"c:\\install\\go\\go.exe\""
	return path
}

// 5、字符串实现UTF-8编码
// Go 语言里的字符串的内部实现使用 UTF-8 编码。通过 rune 类型，可以方便地对每个 UTF-8 字符进行访问。
// 当然，Go 语言也支持按传统的 ASCII 码方式进行逐字符访问。

// 6、定义多行字符串,反引号：``
// 多行字符串一般用于内嵌源码和内嵌数据等
func getMultiLineStr() string {
	str := `
第一行
第二行
第三行
\r\n
`
	// 注意：在这种方式下，反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。
	return str
}

// 将代码内嵌到一个字符串中，这段代码不会编译运行，只会作为一个字符串
const codeTemplate = `// Generated by github.com/davyxu/cellnet/
protoc-gen-msg
// DO NOT EDIT!{{range .Protos}}
// Source: {{.Name}}{{end}}
package {{.PackageName}}
{{if gt .TotalMessages 0}}
import (
    "github.com/davyxu/cellnet"
    "reflect"
    _ "github.com/davyxu/cellnet/codec/pb"
)
{{end}}
func init() {
    {{range .Protos}}
    // {{.Name}}{{range .Messages}}
    cellnet.RegisterMessageMeta("pb","{{.FullName}}", reflect.TypeOf((*{{.Name}})(nil)).Elem(), {{.MsgID}})    {{end}}
    {{end}}
}
`

// 6.1、获取字符串长度
// ASCII 字符串长度使用 len() 函数。
// Unicode 字符串长度使用 utf8.RuneCountInString() 函数。
func printStrLen() {
	str := "hello china"
	// Go 语言的字符串都以 UTF-8 格式保存，每个中文占用 3 个字节
	str1 := "你好，中国！"
	//如果希望按习惯上的字符个数来计算，
	// 就需要使用 Go 语言中 UTF-8 包提供的 RuneCountInString() 函数，统计 Uncode 字符数量。
	str2 := "hi,baby,你是来自中国吗？"
	fmt.Println(len(str), len(str1))
	fmt.Println(utf8.RuneCountInString(str2))
}

// 6.2、遍历字符串，因为字符串可能存在两种形式，所以遍历字符串有两种方法
// ① 遍历ASCII字符
func foreachAsciiStr() {
	theme := "狙击 start"
	for i := 0; i < len(theme); i++ {
		fmt.Printf("ascii: %c %d\n", theme[i], theme[i])
	}
	// 由于没有使用 Unicode，汉字被显示为乱码。
}

// ② 遍历Unicode字符
func foreachUnicodeStr() {
	theme := "狙击 start"
	for k, s := range theme {
		fmt.Printf("Unicode: %d %c  %d\n", k, s, s)
	}
}

// ③ 总结：
// ASCII字符串遍历直接使用下标
// Unicode字符遍历使用for range

// 6.3、截取字符串
func spliceStr() {
	tracer := "死神来了，死神bye bye"
	fmt.Println(tracer[0:15])
	// 获取中文逗号的位置
	comma := strings.Index(tracer, "，")
	// 先从中文逗号往后切片到末尾，在从切片中搜索“死神”
	position := strings.Index(tracer[comma:], "死神")
	fmt.Println(comma, position, tracer[comma+position:])
}

// 6.4、修改字符串，
// Go 语言的字符串无法直接修改每一个字符元素，只能通过重新构造新的字符串并赋值给原来的字符串变量实现
func updateStr() {
	str := "legend never die！"
	strBytes := []byte(str)
	for i := 7; i < 12; i++ {
		strBytes[i] = ' '
	}
	fmt.Println(string(strBytes))
}

// 6.5、字符串连接
func strJoin() {
	// 简单的字符串连接
	str1 := "aaaa"
	str2 := "bbb"
	fmt.Println(str1 + str2)

	// 通过StringBuilder 进行高效连接
	var sb bytes.Buffer
	sb.WriteString(str1)
	sb.WriteString(str2)
	fmt.Println(sb.String())
}
func main() {
	//printFloat()
	//fmt.Println(boolFunc())
	//strFunc()
	//fmt.Println(getPath())
	//fmt.Println(getMultiLineStr())
	//fmt.Println(codeTemplate)
	//printStrLen()
	//foreachAsciiStr()
	//foreachUnicodeStr()
	//spliceStr()
	//updateStr()
	strJoin()
}
